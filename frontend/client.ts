// Code generated by the Encore 1.48.8 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly auth: auth.ServiceClient
    public readonly customers: customers.ServiceClient
    public readonly repairs: repairs.ServiceClient
    public readonly reports: reports.ServiceClient
    public readonly spare_parts: spare_parts.ServiceClient
    public readonly transactions: transactions.ServiceClient
    public readonly vehicles: vehicles.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.auth = new auth.ServiceClient(base)
        this.customers = new customers.ServiceClient(base)
        this.repairs = new repairs.ServiceClient(base)
        this.reports = new reports.ServiceClient(base)
        this.spare_parts = new spare_parts.ServiceClient(base)
        this.transactions = new transactions.ServiceClient(base)
        this.vehicles = new vehicles.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createUser as api_auth_create_user_createUser } from "~backend/auth/create_user";
import { getCurrentUser as api_auth_get_current_user_getCurrentUser } from "~backend/auth/get_current_user";
import { listUsers as api_auth_list_users_listUsers } from "~backend/auth/list_users";
import { login as api_auth_login_login } from "~backend/auth/login";
import { logout as api_auth_logout_logout } from "~backend/auth/logout";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createUser = this.createUser.bind(this)
            this.getCurrentUser = this.getCurrentUser.bind(this)
            this.listUsers = this.listUsers.bind(this)
            this.login = this.login.bind(this)
            this.logout = this.logout.bind(this)
        }

        /**
         * Creates a new user account. Admin-only.
         */
        public async createUser(params: RequestType<typeof api_auth_create_user_createUser>): Promise<ResponseType<typeof api_auth_create_user_createUser>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                email:       params.email,
                "full_name": params["full_name"],
                password:    params.password,
                phone:       params.phone,
                role:        params.role,
                username:    params.username,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/users`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_create_user_createUser>
        }

        /**
         * Gets the current authenticated user's information.
         */
        public async getCurrentUser(params: RequestType<typeof api_auth_get_current_user_getCurrentUser>): Promise<ResponseType<typeof api_auth_get_current_user_getCurrentUser>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/me`, {headers, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_get_current_user_getCurrentUser>
        }

        /**
         * Retrieves all users with optional filtering. Admin-only.
         */
        public async listUsers(params: RequestType<typeof api_auth_list_users_listUsers>): Promise<ResponseType<typeof api_auth_list_users_listUsers>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            const query = makeRecord<string, string | string[]>({
                "is_active": params["is_active"] === undefined ? undefined : String(params["is_active"]),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                page:        params.page === undefined ? undefined : String(params.page),
                role:        params.role,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/users`, {headers, query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_list_users_listUsers>
        }

        /**
         * Authenticates a user and creates a session.
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Logs out a user by invalidating their session.
         */
        public async logout(params: RequestType<typeof api_auth_logout_logout>): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            await this.baseClient.callTypedAPI(`/auth/logout`, {headers, method: "POST", body: undefined})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createCustomer as api_customers_create_customer_createCustomer } from "~backend/customers/create_customer";
import { getCustomer as api_customers_get_customer_getCustomer } from "~backend/customers/get_customer";
import { listCustomers as api_customers_list_customers_listCustomers } from "~backend/customers/list_customers";
import { updateCustomer as api_customers_update_customer_updateCustomer } from "~backend/customers/update_customer";

export namespace customers {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCustomer = this.createCustomer.bind(this)
            this.getCustomer = this.getCustomer.bind(this)
            this.listCustomers = this.listCustomers.bind(this)
            this.updateCustomer = this.updateCustomer.bind(this)
        }

        /**
         * Creates a new customer record.
         */
        public async createCustomer(params: RequestType<typeof api_customers_create_customer_createCustomer>): Promise<ResponseType<typeof api_customers_create_customer_createCustomer>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                address:          params.address,
                email:            params.email,
                "id_card_number": params["id_card_number"],
                name:             params.name,
                phone:            params.phone,
                type:             params.type,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/customers`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_customers_create_customer_createCustomer>
        }

        /**
         * Retrieves a specific customer by ID.
         */
        public async getCustomer(params: RequestType<typeof api_customers_get_customer_getCustomer>): Promise<ResponseType<typeof api_customers_get_customer_getCustomer>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/customers/${encodeURIComponent(params.id)}`, {headers, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_customers_get_customer_getCustomer>
        }

        /**
         * Retrieves all customers with optional filtering and search.
         */
        public async listCustomers(params: RequestType<typeof api_customers_list_customers_listCustomers>): Promise<ResponseType<typeof api_customers_list_customers_listCustomers>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                page:   params.page === undefined ? undefined : String(params.page),
                search: params.search,
                type:   params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/customers`, {headers, query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_customers_list_customers_listCustomers>
        }

        /**
         * Updates an existing customer record.
         */
        public async updateCustomer(params: RequestType<typeof api_customers_update_customer_updateCustomer>): Promise<ResponseType<typeof api_customers_update_customer_updateCustomer>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                address:          params.address,
                email:            params.email,
                "id_card_number": params["id_card_number"],
                "is_active":      params["is_active"],
                name:             params.name,
                phone:            params.phone,
                type:             params.type,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/customers/${encodeURIComponent(params.id)}`, {headers, method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_customers_update_customer_updateCustomer>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { addRepairPart as api_repairs_add_repair_part_addRepairPart } from "~backend/repairs/add_repair_part";
import { createRepair as api_repairs_create_repair_createRepair } from "~backend/repairs/create_repair";
import { getRepair as api_repairs_get_repair_getRepair } from "~backend/repairs/get_repair";
import { listRepairs as api_repairs_list_repairs_listRepairs } from "~backend/repairs/list_repairs";
import { updateRepair as api_repairs_update_repair_updateRepair } from "~backend/repairs/update_repair";

export namespace repairs {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addRepairPart = this.addRepairPart.bind(this)
            this.createRepair = this.createRepair.bind(this)
            this.getRepair = this.getRepair.bind(this)
            this.listRepairs = this.listRepairs.bind(this)
            this.updateRepair = this.updateRepair.bind(this)
        }

        /**
         * Adds a spare part to a repair work order.
         */
        public async addRepairPart(params: RequestType<typeof api_repairs_add_repair_part_addRepairPart>): Promise<ResponseType<typeof api_repairs_add_repair_part_addRepairPart>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                notes:           params.notes,
                "quantity_used": params["quantity_used"],
                "repair_id":     params["repair_id"],
                "spare_part_id": params["spare_part_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/repairs/parts`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_repairs_add_repair_part_addRepairPart>
        }

        /**
         * Creates a new repair work order.
         */
        public async createRepair(params: RequestType<typeof api_repairs_create_repair_createRepair>): Promise<ResponseType<typeof api_repairs_create_repair_createRepair>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description:  params.description,
                "labor_cost": params["labor_cost"],
                title:        params.title,
                "vehicle_id": params["vehicle_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/repairs`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_repairs_create_repair_createRepair>
        }

        /**
         * Retrieves a specific repair with its parts.
         */
        public async getRepair(params: { id: number }): Promise<ResponseType<typeof api_repairs_get_repair_getRepair>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/repairs/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_repairs_get_repair_getRepair>
        }

        /**
         * Retrieves all repairs with optional filtering.
         */
        public async listRepairs(params: RequestType<typeof api_repairs_list_repairs_listRepairs>): Promise<ResponseType<typeof api_repairs_list_repairs_listRepairs>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:         params.limit === undefined ? undefined : String(params.limit),
                "mechanic_id": params["mechanic_id"] === undefined ? undefined : String(params["mechanic_id"]),
                page:          params.page === undefined ? undefined : String(params.page),
                status:        params.status === undefined ? undefined : String(params.status),
                "vehicle_id":  params["vehicle_id"] === undefined ? undefined : String(params["vehicle_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/repairs`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_repairs_list_repairs_listRepairs>
        }

        /**
         * Updates an existing repair work order.
         */
        public async updateRepair(params: RequestType<typeof api_repairs_update_repair_updateRepair>): Promise<ResponseType<typeof api_repairs_update_repair_updateRepair>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description:   params.description,
                "labor_cost":  params["labor_cost"],
                "mechanic_id": params["mechanic_id"],
                status:        params.status,
                title:         params.title,
                "work_notes":  params["work_notes"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/repairs/${encodeURIComponent(params.id)}`, {headers, method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_repairs_update_repair_updateRepair>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getBusinessOverview as api_reports_business_overview_getBusinessOverview } from "~backend/reports/business_overview";
import { getDailyReport as api_reports_daily_report_getDailyReport } from "~backend/reports/daily_report";
import { getMonthlyReport as api_reports_monthly_report_getMonthlyReport } from "~backend/reports/monthly_report";
import { getTopPerformingModels as api_reports_top_performing_models_getTopPerformingModels } from "~backend/reports/top_performing_models";
import { getVehicleProfitability as api_reports_vehicle_profitability_getVehicleProfitability } from "~backend/reports/vehicle_profitability";
import { getWeeklyReport as api_reports_weekly_report_getWeeklyReport } from "~backend/reports/weekly_report";

export namespace reports {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getBusinessOverview = this.getBusinessOverview.bind(this)
            this.getDailyReport = this.getDailyReport.bind(this)
            this.getMonthlyReport = this.getMonthlyReport.bind(this)
            this.getTopPerformingModels = this.getTopPerformingModels.bind(this)
            this.getVehicleProfitability = this.getVehicleProfitability.bind(this)
            this.getWeeklyReport = this.getWeeklyReport.bind(this)
        }

        /**
         * Provides a comprehensive business overview dashboard.
         */
        public async getBusinessOverview(params: RequestType<typeof api_reports_business_overview_getBusinessOverview>): Promise<ResponseType<typeof api_reports_business_overview_getBusinessOverview>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/business-overview`, {headers, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_business_overview_getBusinessOverview>
        }

        /**
         * Generates a daily transaction and profit report.
         */
        public async getDailyReport(params: RequestType<typeof api_reports_daily_report_getDailyReport>): Promise<ResponseType<typeof api_reports_daily_report_getDailyReport>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                date: params.date,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/daily`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_daily_report_getDailyReport>
        }

        /**
         * Generates a comprehensive monthly business report.
         */
        public async getMonthlyReport(params: RequestType<typeof api_reports_monthly_report_getMonthlyReport>): Promise<ResponseType<typeof api_reports_monthly_report_getMonthlyReport>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                month: params.month === undefined ? undefined : String(params.month),
                year:  params.year === undefined ? undefined : String(params.year),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/monthly`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_monthly_report_getMonthlyReport>
        }

        /**
         * Identifies the best performing vehicle models by profit and sales.
         */
        public async getTopPerformingModels(params: RequestType<typeof api_reports_top_performing_models_getTopPerformingModels>): Promise<ResponseType<typeof api_reports_top_performing_models_getTopPerformingModels>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/top-performing-models`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_top_performing_models_getTopPerformingModels>
        }

        /**
         * Analyzes profitability of sold vehicles.
         */
        public async getVehicleProfitability(params: RequestType<typeof api_reports_vehicle_profitability_getVehicleProfitability>): Promise<ResponseType<typeof api_reports_vehicle_profitability_getVehicleProfitability>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:     params.limit === undefined ? undefined : String(params.limit),
                order:     params.order,
                page:      params.page === undefined ? undefined : String(params.page),
                "sort_by": params["sort_by"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/vehicle-profitability`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_vehicle_profitability_getVehicleProfitability>
        }

        /**
         * Generates a weekly business summary report.
         */
        public async getWeeklyReport(params: RequestType<typeof api_reports_weekly_report_getWeeklyReport>): Promise<ResponseType<typeof api_reports_weekly_report_getWeeklyReport>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "week_start": params["week_start"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reports/weekly`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reports_weekly_report_getWeeklyReport>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { adjustStock as api_spare_parts_adjust_stock_adjustStock } from "~backend/spare_parts/adjust_stock";
import { createSparePart as api_spare_parts_create_spare_part_createSparePart } from "~backend/spare_parts/create_spare_part";
import { getLowStockAlerts as api_spare_parts_get_low_stock_alerts_getLowStockAlerts } from "~backend/spare_parts/get_low_stock_alerts";
import { listSpareParts as api_spare_parts_list_spare_parts_listSpareParts } from "~backend/spare_parts/list_spare_parts";

export namespace spare_parts {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.adjustStock = this.adjustStock.bind(this)
            this.createSparePart = this.createSparePart.bind(this)
            this.getLowStockAlerts = this.getLowStockAlerts.bind(this)
            this.listSpareParts = this.listSpareParts.bind(this)
        }

        /**
         * Adjusts the stock quantity of a spare part. Admin-only.
         */
        public async adjustStock(params: RequestType<typeof api_spare_parts_adjust_stock_adjustStock>): Promise<ResponseType<typeof api_spare_parts_adjust_stock_adjustStock>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "new_quantity":  params["new_quantity"],
                notes:           params.notes,
                "spare_part_id": params["spare_part_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/spare-parts/adjust-stock`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_spare_parts_adjust_stock_adjustStock>
        }

        /**
         * Creates a new spare part record. Admin-only.
         */
        public async createSparePart(params: RequestType<typeof api_spare_parts_create_spare_part_createSparePart>): Promise<ResponseType<typeof api_spare_parts_create_spare_part_createSparePart>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                brand:             params.brand,
                "cost_price":      params["cost_price"],
                description:       params.description,
                "min_stock_level": params["min_stock_level"],
                name:              params.name,
                "selling_price":   params["selling_price"],
                "stock_quantity":  params["stock_quantity"],
                "unit_measure":    params["unit_measure"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/spare-parts`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_spare_parts_create_spare_part_createSparePart>
        }

        /**
         * Retrieves spare parts with low stock levels.
         */
        public async getLowStockAlerts(): Promise<ResponseType<typeof api_spare_parts_get_low_stock_alerts_getLowStockAlerts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/spare-parts/low-stock`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_spare_parts_get_low_stock_alerts_getLowStockAlerts>
        }

        /**
         * Retrieves all spare parts with optional filtering.
         */
        public async listSpareParts(params: RequestType<typeof api_spare_parts_list_spare_parts_listSpareParts>): Promise<ResponseType<typeof api_spare_parts_list_spare_parts_listSpareParts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                brand:       params.brand,
                limit:       params.limit === undefined ? undefined : String(params.limit),
                "low_stock": params["low_stock"] === undefined ? undefined : String(params["low_stock"]),
                page:        params.page === undefined ? undefined : String(params.page),
                search:      params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/spare-parts`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_spare_parts_list_spare_parts_listSpareParts>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createPurchaseTransaction as api_transactions_create_purchase_transaction_createPurchaseTransaction } from "~backend/transactions/create_purchase_transaction";
import { createSalesTransaction as api_transactions_create_sales_transaction_createSalesTransaction } from "~backend/transactions/create_sales_transaction";
import { getPurchaseInvoice as api_transactions_get_purchase_invoice_getPurchaseInvoice } from "~backend/transactions/get_purchase_invoice";
import { getSalesInvoice as api_transactions_get_sales_invoice_getSalesInvoice } from "~backend/transactions/get_sales_invoice";
import { listPurchaseTransactions as api_transactions_list_purchase_transactions_listPurchaseTransactions } from "~backend/transactions/list_purchase_transactions";
import { listSalesTransactions as api_transactions_list_sales_transactions_listSalesTransactions } from "~backend/transactions/list_sales_transactions";

export namespace transactions {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createPurchaseTransaction = this.createPurchaseTransaction.bind(this)
            this.createSalesTransaction = this.createSalesTransaction.bind(this)
            this.getPurchaseInvoice = this.getPurchaseInvoice.bind(this)
            this.getSalesInvoice = this.getSalesInvoice.bind(this)
            this.listPurchaseTransactions = this.listPurchaseTransactions.bind(this)
            this.listSalesTransactions = this.listSalesTransactions.bind(this)
        }

        /**
         * Creates a new purchase transaction (buying vehicle from customer).
         */
        public async createPurchaseTransaction(params: RequestType<typeof api_transactions_create_purchase_transaction_createPurchaseTransaction>): Promise<ResponseType<typeof api_transactions_create_purchase_transaction_createPurchaseTransaction>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "customer_id":       params["customer_id"],
                notes:               params.notes,
                "payment_method":    params["payment_method"],
                "payment_reference": params["payment_reference"],
                "tax_rate":          params["tax_rate"],
                "vehicle_id":        params["vehicle_id"],
                "vehicle_price":     params["vehicle_price"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/purchases`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_create_purchase_transaction_createPurchaseTransaction>
        }

        /**
         * Creates a new sales transaction (selling vehicle to customer).
         */
        public async createSalesTransaction(params: RequestType<typeof api_transactions_create_sales_transaction_createSalesTransaction>): Promise<ResponseType<typeof api_transactions_create_sales_transaction_createSalesTransaction>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "customer_id":       params["customer_id"],
                "discount_amount":   params["discount_amount"],
                notes:               params.notes,
                "payment_method":    params["payment_method"],
                "payment_reference": params["payment_reference"],
                "tax_rate":          params["tax_rate"],
                "vehicle_id":        params["vehicle_id"],
                "vehicle_price":     params["vehicle_price"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/sales`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_create_sales_transaction_createSalesTransaction>
        }

        /**
         * Retrieves a purchase transaction invoice by ID.
         */
        public async getPurchaseInvoice(params: { id: number }): Promise<ResponseType<typeof api_transactions_get_purchase_invoice_getPurchaseInvoice>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/purchases/${encodeURIComponent(params.id)}/invoice`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_get_purchase_invoice_getPurchaseInvoice>
        }

        /**
         * Retrieves a sales transaction invoice by ID.
         */
        public async getSalesInvoice(params: { id: number }): Promise<ResponseType<typeof api_transactions_get_sales_invoice_getSalesInvoice>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/sales/${encodeURIComponent(params.id)}/invoice`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_get_sales_invoice_getSalesInvoice>
        }

        /**
         * Retrieves all purchase transactions with optional filtering.
         */
        public async listPurchaseTransactions(params: RequestType<typeof api_transactions_list_purchase_transactions_listPurchaseTransactions>): Promise<ResponseType<typeof api_transactions_list_purchase_transactions_listPurchaseTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "cashier_id":  params["cashier_id"] === undefined ? undefined : String(params["cashier_id"]),
                "customer_id": params["customer_id"] === undefined ? undefined : String(params["customer_id"]),
                "end_date":    params["end_date"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                page:          params.page === undefined ? undefined : String(params.page),
                "start_date":  params["start_date"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/purchases`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_list_purchase_transactions_listPurchaseTransactions>
        }

        /**
         * Retrieves all sales transactions with optional filtering.
         */
        public async listSalesTransactions(params: RequestType<typeof api_transactions_list_sales_transactions_listSalesTransactions>): Promise<ResponseType<typeof api_transactions_list_sales_transactions_listSalesTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "cashier_id":  params["cashier_id"] === undefined ? undefined : String(params["cashier_id"]),
                "customer_id": params["customer_id"] === undefined ? undefined : String(params["customer_id"]),
                "end_date":    params["end_date"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                page:          params.page === undefined ? undefined : String(params.page),
                "start_date":  params["start_date"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/sales`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transactions_list_sales_transactions_listSalesTransactions>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createVehicle as api_vehicles_create_vehicle_createVehicle } from "~backend/vehicles/create_vehicle";
import { getVehicle as api_vehicles_get_vehicle_getVehicle } from "~backend/vehicles/get_vehicle";
import { listVehicles as api_vehicles_list_vehicles_listVehicles } from "~backend/vehicles/list_vehicles";
import { updateVehicle as api_vehicles_update_vehicle_updateVehicle } from "~backend/vehicles/update_vehicle";
import { uploadImage as api_vehicles_upload_image_uploadImage } from "~backend/vehicles/upload_image";

export namespace vehicles {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createVehicle = this.createVehicle.bind(this)
            this.getVehicle = this.getVehicle.bind(this)
            this.listVehicles = this.listVehicles.bind(this)
            this.updateVehicle = this.updateVehicle.bind(this)
            this.uploadImage = this.uploadImage.bind(this)
        }

        /**
         * Creates a new vehicle record.
         */
        public async createVehicle(params: RequestType<typeof api_vehicles_create_vehicle_createVehicle>): Promise<ResponseType<typeof api_vehicles_create_vehicle_createVehicle>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                brand:                        params.brand,
                "chassis_number":             params["chassis_number"],
                color:                        params.color,
                "condition_notes":            params["condition_notes"],
                "fuel_type":                  params["fuel_type"],
                "license_plate":              params["license_plate"],
                mileage:                      params.mileage,
                model:                        params.model,
                "purchase_notes":             params["purchase_notes"],
                "purchase_price":             params["purchase_price"],
                "purchased_from_customer_id": params["purchased_from_customer_id"],
                transmission:                 params.transmission,
                variant:                      params.variant,
                year:                         params.year,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vehicles`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vehicles_create_vehicle_createVehicle>
        }

        /**
         * Retrieves a specific vehicle with its images.
         */
        public async getVehicle(params: { id: number }): Promise<ResponseType<typeof api_vehicles_get_vehicle_getVehicle>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vehicles/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vehicles_get_vehicle_getVehicle>
        }

        /**
         * Retrieves all vehicles with optional filtering and search.
         */
        public async listVehicles(params: RequestType<typeof api_vehicles_list_vehicles_listVehicles>): Promise<ResponseType<typeof api_vehicles_list_vehicles_listVehicles>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            const query = makeRecord<string, string | string[]>({
                brand:  params.brand,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                page:   params.page === undefined ? undefined : String(params.page),
                search: params.search,
                status: params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vehicles`, {headers, query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vehicles_list_vehicles_listVehicles>
        }

        /**
         * Updates an existing vehicle record.
         */
        public async updateVehicle(params: RequestType<typeof api_vehicles_update_vehicle_updateVehicle>): Promise<ResponseType<typeof api_vehicles_update_vehicle_updateVehicle>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "approved_selling_price":  params["approved_selling_price"],
                brand:                     params.brand,
                color:                     params.color,
                "condition_notes":         params["condition_notes"],
                "final_selling_price":     params["final_selling_price"],
                "fuel_type":               params["fuel_type"],
                "license_plate":           params["license_plate"],
                mileage:                   params.mileage,
                model:                     params.model,
                status:                    params.status,
                "suggested_selling_price": params["suggested_selling_price"],
                transmission:              params.transmission,
                variant:                   params.variant,
                year:                      params.year,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vehicles/${encodeURIComponent(params.id)}`, {headers, method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vehicles_update_vehicle_updateVehicle>
        }

        /**
         * Uploads an image for a vehicle.
         */
        public async uploadImage(params: RequestType<typeof api_vehicles_upload_image_uploadImage>): Promise<ResponseType<typeof api_vehicles_upload_image_uploadImage>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description:  params.description,
                "image_type": params["image_type"],
                "is_primary": params["is_primary"],
                "vehicle_id": params["vehicle_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vehicles/images`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vehicles_upload_image_uploadImage>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.8)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
